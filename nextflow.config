workDir = "/rds/general/user/${System.getenv('USER')}/ephemeral/NEXTFLOW/"
process.container = "docker://ah3918/genotype_image:latest"
singularity.autoMounts = true
singularity.cacheDir="/rds/general/user/${System.getenv('USER')}/ephemeral/NEXTFLOW/"

process {
    withName: /create_genotype|create_genotype_qsub|run_matrixeQTL/  {
        container = "docker://ah3918/genotype_image:latest"
    }
    withName: /pseudobulk_singlecell|qc_expression/{
        container = "docker://ah3918/expression_image:latest"
    }
    withName: final_report {
        container = "docker://ah3918/report_image:latest"
    }
}

manifest {
    name = 'username/repo'
    author = 'Your Name <your.email@example.com>'
    description = 'A description of your pipeline'
    version = '1.0.0'
    nextflowVersion = '>=20.10.0'
}

report {
    enabled = true
    file = "${baseDir}/../pipeline_report.html"
    overwrite = true
}

timeline {
    enabled = true
    file = "${baseDir}/../pipeline_timeline.html"
    overwrite = true
}

dag {
    enabled = true
    file = "${baseDir}/../pipeline_dag.html"
    overwrite = true
}

mail {
    smtp.host = 'in-v3.mailjet.com'
    smtp.port = 587
    smtp.user = "${System.getenv('SMTP_USER')}"
    smtp.password = "${System.getenv('SMTP_PASSWORD')}"
    smtp.auth = true
    smtp.starttls.enable = true
    smtp.starttls.required = true
    smtp.ssl.protocols = 'TLSv1.2'
    from = "johnsonlabgithub@outlook.com"
}

profiles {
    
    offline {
        docker.enabled=true
        process {
            withName: /create_genotype|create_genotype_qsub|run_matrixeQTL|combine_eqtls/  {
                container = "ah3918/genotype_image:latest"
            }
            withName: /pseudobulk_singlecell|qc_expression/ {
                container = "ah3918/expression_image:latest"
            }
            withName: final_report {
                container = "ah3918/report_image:latest"
            }
        }

        docker {
            enabled = true
        }
        singularity{
            enabled=false
        }
    }
    imperial {
        singularity.enabled = true
        process {
            executor = 'pbspro'
            
            // Update amount of max retries and set "retry" as the error strategy for all error codes
            errorStrategy = 'retry'
            maxRetries = 5
            maxErrors = '-1'


            // General resource requirements
            queue  = { 4 * task.attempt  > 8 ? 'v1_small72' : 'v1_small24'}
            cpus   = { 1	* task.attempt }
            memory = { 6.GB	* task.attempt }  
            time   = { 4.h	* task.attempt } 

            // Process-specific resource requirements
            withLabel:process_single {
                cpus   = 1
                memory = { 6.GB	* task.attempt }
                time   = { 4.h	* task.attempt }
            }

            withLabel:process_low {
                cpus   = { 2	 * task.attempt }
                memory = { 12.GB * task.attempt }
                time   = { 2.h	 * task.attempt }
            }

            withLabel:process_medium { 
                // TARGET QUEUE: medium
                queue = 'v1_medium72'
                cpus   = { 9	 * task.attempt }
                memory = { 36.GB * task.attempt }
                time   = { 9.h	 * task.attempt }
            }

            withLabel:process_high {
                // TARGET QUEUE: medium
                queue = 'v1_medium72'
                cpus   = { 12	 * task.attempt }
                memory = { 72.GB * task.attempt }
                time   = { 14.h	 * task.attempt }
            }

            withLabel:process_long {
                // TARGET QUEUE: medium
                queue  = 'v1_medium72'
                cpus   = 9
                memory = 96.GB
                time   = { 14.h	 * task.attempt }
            }

            withLabel:process_high_memory {
                // TARGET QUEUE: medium or largemem based on memory
                queue = { 200 * task.attempt < 921 ? 'v1_medium72' : 'v1_largemem72' }
                cpus   = { 10	  * task.attempt }
                memory = { 200.GB * task.attempt }
                time   = { 12.h	  * task.attempt }
            }
        }
    }
    medbio {
        process {
            executor = 'pbspro'
            queue = 'pqmedbio-tput'
            //queue = 'med-bio' //!! this is an alias and shouldn't be used
        }
    }
}

executor {
    $pbspro {
        queueSize = 49
        submitRateLimit = '10 sec'
    }

    $local {
        cpus = 2
        queueSize = 1
        memory = '6 GB'
    }
}